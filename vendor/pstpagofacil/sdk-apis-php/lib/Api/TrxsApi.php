<?php
/**
 * TrxsApi
 * PHP version 5
 *
 * @category Class
 * @package  PSTPagoFacil\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Pago Facil
 *
 * API de Pago Fácil
 *
 * The version of the OpenAPI document: 2.1.5
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PSTPagoFacil\ApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PSTPagoFacil\ApiClient\ApiException;
use PSTPagoFacil\ApiClient\Configuration;
use PSTPagoFacil\ApiClient\HeaderSelector;
use PSTPagoFacil\ApiClient\ObjectSerializer;

/**
 * TrxsApi Class Doc Comment
 *
 * @category Class
 * @package  PSTPagoFacil\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrxsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation trxsIdGet
     *
     * Obtiene la informacion de la transacción exitosa, asociada a un id
     *
     * @param  float $id id (required)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PSTPagoFacil\ApiClient\Model\ResponseBodyGetTrx|\PSTPagoFacil\ApiClient\Model\InlineResponse400
     */
    public function trxsIdGet($id)
    {
        list($response) = $this->trxsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation trxsIdGetWithHttpInfo
     *
     * Obtiene la informacion de la transacción exitosa, asociada a un id
     *
     * @param  float $id (required)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PSTPagoFacil\ApiClient\Model\ResponseBodyGetTrx|\PSTPagoFacil\ApiClient\Model\InlineResponse400, HTTP status code, HTTP response headers (array of strings)
     */
    public function trxsIdGetWithHttpInfo($id)
    {
        $request = $this->trxsIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\PSTPagoFacil\ApiClient\Model\ResponseBodyGetTrx' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\ResponseBodyGetTrx', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PSTPagoFacil\ApiClient\Model\ResponseBodyGetTrx';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\ResponseBodyGetTrx',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trxsIdGetAsync
     *
     * Obtiene la informacion de la transacción exitosa, asociada a un id
     *
     * @param  float $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsIdGetAsync($id)
    {
        return $this->trxsIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trxsIdGetAsyncWithHttpInfo
     *
     * Obtiene la informacion de la transacción exitosa, asociada a un id
     *
     * @param  float $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\PSTPagoFacil\ApiClient\Model\ResponseBodyGetTrx';
        $request = $this->trxsIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trxsIdGet'
     *
     * @param  float $id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function trxsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling trxsIdGet'
            );
        }

        $resourcePath = '/trxs/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trxsIdTrxNullificationGet
     *
     * @param  float $id_trx id_trx (required)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PSTPagoFacil\ApiClient\Model\InlineResponse2002|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse400
     */
    public function trxsIdTrxNullificationGet($id_trx)
    {
        list($response) = $this->trxsIdTrxNullificationGetWithHttpInfo($id_trx);
        return $response;
    }

    /**
     * Operation trxsIdTrxNullificationGetWithHttpInfo
     *
     * @param  float $id_trx (required)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PSTPagoFacil\ApiClient\Model\InlineResponse2002|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse400, HTTP status code, HTTP response headers (array of strings)
     */
    public function trxsIdTrxNullificationGetWithHttpInfo($id_trx)
    {
        $request = $this->trxsIdTrxNullificationGetRequest($id_trx);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse2002' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse2002', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse4011' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse4011', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse4011' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse4011', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PSTPagoFacil\ApiClient\Model\InlineResponse2002';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse4011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse4011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trxsIdTrxNullificationGetAsync
     *
     * 
     *
     * @param  float $id_trx (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsIdTrxNullificationGetAsync($id_trx)
    {
        return $this->trxsIdTrxNullificationGetAsyncWithHttpInfo($id_trx)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trxsIdTrxNullificationGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  float $id_trx (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsIdTrxNullificationGetAsyncWithHttpInfo($id_trx)
    {
        $returnType = '\PSTPagoFacil\ApiClient\Model\InlineResponse2002';
        $request = $this->trxsIdTrxNullificationGetRequest($id_trx);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trxsIdTrxNullificationGet'
     *
     * @param  float $id_trx (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function trxsIdTrxNullificationGetRequest($id_trx)
    {
        // verify the required parameter 'id_trx' is set
        if ($id_trx === null || (is_array($id_trx) && count($id_trx) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_trx when calling trxsIdTrxNullificationGet'
            );
        }

        $resourcePath = '/trxs/{idTrx}/nullification/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_trx !== null) {
            $resourcePath = str_replace(
                '{' . 'idTrx' . '}',
                ObjectSerializer::toPathValue($id_trx),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trxsIdTrxNullificationPost
     *
     * @param  float $id_trx id_trx (required)
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyNullification $request_body_nullification request_body_nullification (optional)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PSTPagoFacil\ApiClient\Model\ResponseBodyNullification|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse400
     */
    public function trxsIdTrxNullificationPost($id_trx, $request_body_nullification = null)
    {
        list($response) = $this->trxsIdTrxNullificationPostWithHttpInfo($id_trx, $request_body_nullification);
        return $response;
    }

    /**
     * Operation trxsIdTrxNullificationPostWithHttpInfo
     *
     * @param  float $id_trx (required)
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyNullification $request_body_nullification (optional)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PSTPagoFacil\ApiClient\Model\ResponseBodyNullification|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse400, HTTP status code, HTTP response headers (array of strings)
     */
    public function trxsIdTrxNullificationPostWithHttpInfo($id_trx, $request_body_nullification = null)
    {
        $request = $this->trxsIdTrxNullificationPostRequest($id_trx, $request_body_nullification);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\PSTPagoFacil\ApiClient\Model\ResponseBodyNullification' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\ResponseBodyNullification', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse4011' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse4011', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse4011' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse4011', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PSTPagoFacil\ApiClient\Model\ResponseBodyNullification';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\ResponseBodyNullification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse4011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse4011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trxsIdTrxNullificationPostAsync
     *
     * 
     *
     * @param  float $id_trx (required)
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyNullification $request_body_nullification (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsIdTrxNullificationPostAsync($id_trx, $request_body_nullification = null)
    {
        return $this->trxsIdTrxNullificationPostAsyncWithHttpInfo($id_trx, $request_body_nullification)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trxsIdTrxNullificationPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  float $id_trx (required)
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyNullification $request_body_nullification (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsIdTrxNullificationPostAsyncWithHttpInfo($id_trx, $request_body_nullification = null)
    {
        $returnType = '\PSTPagoFacil\ApiClient\Model\ResponseBodyNullification';
        $request = $this->trxsIdTrxNullificationPostRequest($id_trx, $request_body_nullification);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trxsIdTrxNullificationPost'
     *
     * @param  float $id_trx (required)
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyNullification $request_body_nullification (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function trxsIdTrxNullificationPostRequest($id_trx, $request_body_nullification = null)
    {
        // verify the required parameter 'id_trx' is set
        if ($id_trx === null || (is_array($id_trx) && count($id_trx) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_trx when calling trxsIdTrxNullificationPost'
            );
        }

        $resourcePath = '/trxs/{idTrx}/nullification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id_trx !== null) {
            $resourcePath = str_replace(
                '{' . 'idTrx' . '}',
                ObjectSerializer::toPathValue($id_trx),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request_body_nullification)) {
            $_tempBody = $request_body_nullification;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trxsIdTrxNullificationStatusGet
     *
     * @param  float $id_trx id_trx (required)
     * @param  string $verification_token verification_token (required)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PSTPagoFacil\ApiClient\Model\InlineResponse2003|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse400
     */
    public function trxsIdTrxNullificationStatusGet($id_trx, $verification_token)
    {
        list($response) = $this->trxsIdTrxNullificationStatusGetWithHttpInfo($id_trx, $verification_token);
        return $response;
    }

    /**
     * Operation trxsIdTrxNullificationStatusGetWithHttpInfo
     *
     * @param  float $id_trx (required)
     * @param  string $verification_token (required)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PSTPagoFacil\ApiClient\Model\InlineResponse2003|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse4011|\PSTPagoFacil\ApiClient\Model\InlineResponse400, HTTP status code, HTTP response headers (array of strings)
     */
    public function trxsIdTrxNullificationStatusGetWithHttpInfo($id_trx, $verification_token)
    {
        $request = $this->trxsIdTrxNullificationStatusGetRequest($id_trx, $verification_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse4011' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse4011', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse4011' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse4011', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PSTPagoFacil\ApiClient\Model\InlineResponse2003';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse4011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse4011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trxsIdTrxNullificationStatusGetAsync
     *
     * 
     *
     * @param  float $id_trx (required)
     * @param  string $verification_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsIdTrxNullificationStatusGetAsync($id_trx, $verification_token)
    {
        return $this->trxsIdTrxNullificationStatusGetAsyncWithHttpInfo($id_trx, $verification_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trxsIdTrxNullificationStatusGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  float $id_trx (required)
     * @param  string $verification_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsIdTrxNullificationStatusGetAsyncWithHttpInfo($id_trx, $verification_token)
    {
        $returnType = '\PSTPagoFacil\ApiClient\Model\InlineResponse2003';
        $request = $this->trxsIdTrxNullificationStatusGetRequest($id_trx, $verification_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trxsIdTrxNullificationStatusGet'
     *
     * @param  float $id_trx (required)
     * @param  string $verification_token (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function trxsIdTrxNullificationStatusGetRequest($id_trx, $verification_token)
    {
        // verify the required parameter 'id_trx' is set
        if ($id_trx === null || (is_array($id_trx) && count($id_trx) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_trx when calling trxsIdTrxNullificationStatusGet'
            );
        }
        // verify the required parameter 'verification_token' is set
        if ($verification_token === null || (is_array($verification_token) && count($verification_token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $verification_token when calling trxsIdTrxNullificationStatusGet'
            );
        }
        if ($verification_token > 36) {
            throw new \InvalidArgumentException('invalid value for "$verification_token" when calling TrxsApi.trxsIdTrxNullificationStatusGet, must be smaller than or equal to 36.');
        }


        $resourcePath = '/trxs/{idTrx}/nullification/status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($verification_token !== null) {
            $queryParams['verificationToken'] = ObjectSerializer::toQueryValue($verification_token);
        }

        // path params
        if ($id_trx !== null) {
            $resourcePath = str_replace(
                '{' . 'idTrx' . '}',
                ObjectSerializer::toPathValue($id_trx),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trxsPost
     *
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyTrx $request_body_trx request_body_trx (optional)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PSTPagoFacil\ApiClient\Model\InlineResponse2001|\PSTPagoFacil\ApiClient\Model\InlineResponse400|\PSTPagoFacil\ApiClient\Model\InlineResponse400|\PSTPagoFacil\ApiClient\Model\InlineResponse409|\PSTPagoFacil\ApiClient\Model\InlineResponse500
     */
    public function trxsPost($request_body_trx = null)
    {
        list($response) = $this->trxsPostWithHttpInfo($request_body_trx);
        return $response;
    }

    /**
     * Operation trxsPostWithHttpInfo
     *
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyTrx $request_body_trx (optional)
     *
     * @throws \PSTPagoFacil\ApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PSTPagoFacil\ApiClient\Model\InlineResponse2001|\PSTPagoFacil\ApiClient\Model\InlineResponse400|\PSTPagoFacil\ApiClient\Model\InlineResponse400|\PSTPagoFacil\ApiClient\Model\InlineResponse409|\PSTPagoFacil\ApiClient\Model\InlineResponse500, HTTP status code, HTTP response headers (array of strings)
     */
    public function trxsPostWithHttpInfo($request_body_trx = null)
    {
        $request = $this->trxsPostRequest($request_body_trx);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse2001' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse2001', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse400' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse400', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse409' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse409', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\PSTPagoFacil\ApiClient\Model\InlineResponse500' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\PSTPagoFacil\ApiClient\Model\InlineResponse500', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\PSTPagoFacil\ApiClient\Model\InlineResponse2001';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse409',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PSTPagoFacil\ApiClient\Model\InlineResponse500',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trxsPostAsync
     *
     * 
     *
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyTrx $request_body_trx (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsPostAsync($request_body_trx = null)
    {
        return $this->trxsPostAsyncWithHttpInfo($request_body_trx)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trxsPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyTrx $request_body_trx (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trxsPostAsyncWithHttpInfo($request_body_trx = null)
    {
        $returnType = '\PSTPagoFacil\ApiClient\Model\InlineResponse2001';
        $request = $this->trxsPostRequest($request_body_trx);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trxsPost'
     *
     * @param  \PSTPagoFacil\ApiClient\Model\RequestBodyTrx $request_body_trx (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function trxsPostRequest($request_body_trx = null)
    {

        $resourcePath = '/trxs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request_body_trx)) {
            $_tempBody = $request_body_trx;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
