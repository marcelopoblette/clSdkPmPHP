<?php
/**
 * InlineResponse200Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  PSTPagoFacil\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Pago Facil
 *
 * API de Pago FÃ¡cil
 *
 * The version of the OpenAPI document: 2.1.5
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PSTPagoFacil\ApiClient\Model;

use \ArrayAccess;
use \PSTPagoFacil\ApiClient\ObjectSerializer;

/**
 * InlineResponse200Data Class Doc Comment
 *
 * @category Class
 * @package  PSTPagoFacil\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InlineResponse200Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'inline_response_200_data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'total_remittances' => 'int',
        'items' => '\PSTPagoFacil\ApiClient\Model\InlineResponse200DataItems[]',
        'total_transactions' => 'int',
        'total_nullification' => 'int',
        'nullifications' => '\PSTPagoFacil\ApiClient\Model\InlineResponse200DataNullifications[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'total_remittances' => null,
        'items' => null,
        'total_transactions' => null,
        'total_nullification' => null,
        'nullifications' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_remittances' => 'totalRemittances',
        'items' => 'items',
        'total_transactions' => 'totalTransactions',
        'total_nullification' => 'totalNullification',
        'nullifications' => 'nullifications'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_remittances' => 'setTotalRemittances',
        'items' => 'setItems',
        'total_transactions' => 'setTotalTransactions',
        'total_nullification' => 'setTotalNullification',
        'nullifications' => 'setNullifications'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_remittances' => 'getTotalRemittances',
        'items' => 'getItems',
        'total_transactions' => 'getTotalTransactions',
        'total_nullification' => 'getTotalNullification',
        'nullifications' => 'getNullifications'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_remittances'] = isset($data['total_remittances']) ? $data['total_remittances'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['total_transactions'] = isset($data['total_transactions']) ? $data['total_transactions'] : null;
        $this->container['total_nullification'] = isset($data['total_nullification']) ? $data['total_nullification'] : null;
        $this->container['nullifications'] = isset($data['nullifications']) ? $data['nullifications'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_remittances
     *
     * @return int|null
     */
    public function getTotalRemittances()
    {
        return $this->container['total_remittances'];
    }

    /**
     * Sets total_remittances
     *
     * @param int|null $total_remittances Total de los abonos
     *
     * @return $this
     */
    public function setTotalRemittances($total_remittances)
    {
        $this->container['total_remittances'] = $total_remittances;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \PSTPagoFacil\ApiClient\Model\InlineResponse200DataItems[]|null
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \PSTPagoFacil\ApiClient\Model\InlineResponse200DataItems[]|null $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets total_transactions
     *
     * @return int|null
     */
    public function getTotalTransactions()
    {
        return $this->container['total_transactions'];
    }

    /**
     * Sets total_transactions
     *
     * @param int|null $total_transactions Total de transacciones
     *
     * @return $this
     */
    public function setTotalTransactions($total_transactions)
    {
        $this->container['total_transactions'] = $total_transactions;

        return $this;
    }

    /**
     * Gets total_nullification
     *
     * @return int|null
     */
    public function getTotalNullification()
    {
        return $this->container['total_nullification'];
    }

    /**
     * Sets total_nullification
     *
     * @param int|null $total_nullification Total de anulaciones
     *
     * @return $this
     */
    public function setTotalNullification($total_nullification)
    {
        $this->container['total_nullification'] = $total_nullification;

        return $this;
    }

    /**
     * Gets nullifications
     *
     * @return \PSTPagoFacil\ApiClient\Model\InlineResponse200DataNullifications[]|null
     */
    public function getNullifications()
    {
        return $this->container['nullifications'];
    }

    /**
     * Sets nullifications
     *
     * @param \PSTPagoFacil\ApiClient\Model\InlineResponse200DataNullifications[]|null $nullifications nullifications
     *
     * @return $this
     */
    public function setNullifications($nullifications)
    {
        $this->container['nullifications'] = $nullifications;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


