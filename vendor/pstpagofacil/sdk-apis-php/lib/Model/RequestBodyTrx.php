<?php
/**
 * RequestBodyTrx
 *
 * PHP version 5
 *
 * @category Class
 * @package  PSTPagoFacil\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * API Pago Facil
 *
 * API de Pago FÃ¡cil
 *
 * The version of the OpenAPI document: 2.1.5
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.2.3
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace PSTPagoFacil\ApiClient\Model;

use \ArrayAccess;
use \PSTPagoFacil\ApiClient\ObjectSerializer;

/**
 * RequestBodyTrx Class Doc Comment
 *
 * @category Class
 * @package  PSTPagoFacil\ApiClient
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class RequestBodyTrx implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'requestBodyTrx';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'x_account_id' => 'string',
        'x_amount' => 'float',
        'x_currency' => 'string',
        'x_reference' => 'string',
        'x_customer_email' => 'string',
        'x_url_complete' => 'string',
        'x_url_callback' => 'string',
        'x_url_cancel' => 'string',
        'x_shop_country' => 'string',
        'x_session_id' => 'string',
        'x_products' => 'object[]',
        'x_billing_details' => '\PSTPagoFacil\ApiClient\Model\BillingDetails',
        'x_shippment' => '\PSTPagoFacil\ApiClient\Model\Shippment',
        'x_document' => '\PSTPagoFacil\ApiClient\Model\Document',
        'x_signature' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'x_account_id' => null,
        'x_amount' => null,
        'x_currency' => null,
        'x_reference' => null,
        'x_customer_email' => 'email',
        'x_url_complete' => 'uri',
        'x_url_callback' => 'uri',
        'x_url_cancel' => 'uri',
        'x_shop_country' => null,
        'x_session_id' => null,
        'x_products' => null,
        'x_billing_details' => null,
        'x_shippment' => null,
        'x_document' => null,
        'x_signature' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'x_account_id' => 'x_account_id',
        'x_amount' => 'x_amount',
        'x_currency' => 'x_currency',
        'x_reference' => 'x_reference',
        'x_customer_email' => 'x_customer_email',
        'x_url_complete' => 'x_url_complete',
        'x_url_callback' => 'x_url_callback',
        'x_url_cancel' => 'x_url_cancel',
        'x_shop_country' => 'x_shop_country',
        'x_session_id' => 'x_session_id',
        'x_products' => 'x_products',
        'x_billing_details' => 'x_billing_details',
        'x_shippment' => 'x_shippment',
        'x_document' => 'x_document',
        'x_signature' => 'x_signature'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'x_account_id' => 'setXAccountId',
        'x_amount' => 'setXAmount',
        'x_currency' => 'setXCurrency',
        'x_reference' => 'setXReference',
        'x_customer_email' => 'setXCustomerEmail',
        'x_url_complete' => 'setXUrlComplete',
        'x_url_callback' => 'setXUrlCallback',
        'x_url_cancel' => 'setXUrlCancel',
        'x_shop_country' => 'setXShopCountry',
        'x_session_id' => 'setXSessionId',
        'x_products' => 'setXProducts',
        'x_billing_details' => 'setXBillingDetails',
        'x_shippment' => 'setXShippment',
        'x_document' => 'setXDocument',
        'x_signature' => 'setXSignature'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'x_account_id' => 'getXAccountId',
        'x_amount' => 'getXAmount',
        'x_currency' => 'getXCurrency',
        'x_reference' => 'getXReference',
        'x_customer_email' => 'getXCustomerEmail',
        'x_url_complete' => 'getXUrlComplete',
        'x_url_callback' => 'getXUrlCallback',
        'x_url_cancel' => 'getXUrlCancel',
        'x_shop_country' => 'getXShopCountry',
        'x_session_id' => 'getXSessionId',
        'x_products' => 'getXProducts',
        'x_billing_details' => 'getXBillingDetails',
        'x_shippment' => 'getXShippment',
        'x_document' => 'getXDocument',
        'x_signature' => 'getXSignature'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['x_account_id'] = isset($data['x_account_id']) ? $data['x_account_id'] : null;
        $this->container['x_amount'] = isset($data['x_amount']) ? $data['x_amount'] : null;
        $this->container['x_currency'] = isset($data['x_currency']) ? $data['x_currency'] : null;
        $this->container['x_reference'] = isset($data['x_reference']) ? $data['x_reference'] : null;
        $this->container['x_customer_email'] = isset($data['x_customer_email']) ? $data['x_customer_email'] : null;
        $this->container['x_url_complete'] = isset($data['x_url_complete']) ? $data['x_url_complete'] : null;
        $this->container['x_url_callback'] = isset($data['x_url_callback']) ? $data['x_url_callback'] : null;
        $this->container['x_url_cancel'] = isset($data['x_url_cancel']) ? $data['x_url_cancel'] : null;
        $this->container['x_shop_country'] = isset($data['x_shop_country']) ? $data['x_shop_country'] : null;
        $this->container['x_session_id'] = isset($data['x_session_id']) ? $data['x_session_id'] : null;
        $this->container['x_products'] = isset($data['x_products']) ? $data['x_products'] : null;
        $this->container['x_billing_details'] = isset($data['x_billing_details']) ? $data['x_billing_details'] : null;
        $this->container['x_shippment'] = isset($data['x_shippment']) ? $data['x_shippment'] : null;
        $this->container['x_document'] = isset($data['x_document']) ? $data['x_document'] : null;
        $this->container['x_signature'] = isset($data['x_signature']) ? $data['x_signature'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['x_account_id'] === null) {
            $invalidProperties[] = "'x_account_id' can't be null";
        }
        if ((mb_strlen($this->container['x_account_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'x_account_id', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['x_account_id']) < 36)) {
            $invalidProperties[] = "invalid value for 'x_account_id', the character length must be bigger than or equal to 36.";
        }

        if ($this->container['x_amount'] === null) {
            $invalidProperties[] = "'x_amount' can't be null";
        }
        if (($this->container['x_amount'] < 500)) {
            $invalidProperties[] = "invalid value for 'x_amount', must be bigger than or equal to 500.";
        }

        if ($this->container['x_currency'] === null) {
            $invalidProperties[] = "'x_currency' can't be null";
        }
        if ((mb_strlen($this->container['x_currency']) > 3)) {
            $invalidProperties[] = "invalid value for 'x_currency', the character length must be smaller than or equal to 3.";
        }

        if ((mb_strlen($this->container['x_currency']) < 3)) {
            $invalidProperties[] = "invalid value for 'x_currency', the character length must be bigger than or equal to 3.";
        }

        if ($this->container['x_reference'] === null) {
            $invalidProperties[] = "'x_reference' can't be null";
        }
        if ((mb_strlen($this->container['x_reference']) > 100)) {
            $invalidProperties[] = "invalid value for 'x_reference', the character length must be smaller than or equal to 100.";
        }

        if ((mb_strlen($this->container['x_reference']) < 1)) {
            $invalidProperties[] = "invalid value for 'x_reference', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['x_customer_email'] === null) {
            $invalidProperties[] = "'x_customer_email' can't be null";
        }
        if (!preg_match("/^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/", $this->container['x_customer_email'])) {
            $invalidProperties[] = "invalid value for 'x_customer_email', must be conform to the pattern /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/.";
        }

        if ($this->container['x_url_complete'] === null) {
            $invalidProperties[] = "'x_url_complete' can't be null";
        }
        if ($this->container['x_url_callback'] === null) {
            $invalidProperties[] = "'x_url_callback' can't be null";
        }
        if ($this->container['x_url_cancel'] === null) {
            $invalidProperties[] = "'x_url_cancel' can't be null";
        }
        if ($this->container['x_shop_country'] === null) {
            $invalidProperties[] = "'x_shop_country' can't be null";
        }
        if ((mb_strlen($this->container['x_shop_country']) > 2)) {
            $invalidProperties[] = "invalid value for 'x_shop_country', the character length must be smaller than or equal to 2.";
        }

        if ((mb_strlen($this->container['x_shop_country']) < 2)) {
            $invalidProperties[] = "invalid value for 'x_shop_country', the character length must be bigger than or equal to 2.";
        }

        if ($this->container['x_session_id'] === null) {
            $invalidProperties[] = "'x_session_id' can't be null";
        }
        if ((mb_strlen($this->container['x_session_id']) > 61)) {
            $invalidProperties[] = "invalid value for 'x_session_id', the character length must be smaller than or equal to 61.";
        }

        if ((mb_strlen($this->container['x_session_id']) < 5)) {
            $invalidProperties[] = "invalid value for 'x_session_id', the character length must be bigger than or equal to 5.";
        }

        if ($this->container['x_signature'] === null) {
            $invalidProperties[] = "'x_signature' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets x_account_id
     *
     * @return string
     */
    public function getXAccountId()
    {
        return $this->container['x_account_id'];
    }

    /**
     * Sets x_account_id
     *
     * @param string $x_account_id Corresponde al <u>Token Service</u> relacionado al servicio con el que deseas generar el cobro. Es ditinto para el ambiente de desarrollo y producciÃ³n.
     *
     * @return $this
     */
    public function setXAccountId($x_account_id)
    {
        if ((mb_strlen($x_account_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $x_account_id when calling RequestBodyTrx., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($x_account_id) < 36)) {
            throw new \InvalidArgumentException('invalid length for $x_account_id when calling RequestBodyTrx., must be bigger than or equal to 36.');
        }

        $this->container['x_account_id'] = $x_account_id;

        return $this;
    }

    /**
     * Gets x_amount
     *
     * @return float
     */
    public function getXAmount()
    {
        return $this->container['x_amount'];
    }

    /**
     * Sets x_amount
     *
     * @param float $x_amount Monto de la transacciÃ³n. Admite decimales si la divisa utilizada los utiliza. El mÃ­nimo depende de la divis. En CLP es 500.
     *
     * @return $this
     */
    public function setXAmount($x_amount)
    {

        if (($x_amount < 500)) {
            throw new \InvalidArgumentException('invalid value for $x_amount when calling RequestBodyTrx., must be bigger than or equal to 500.');
        }

        $this->container['x_amount'] = $x_amount;

        return $this;
    }

    /**
     * Gets x_currency
     *
     * @return string
     */
    public function getXCurrency()
    {
        return $this->container['x_currency'];
    }

    /**
     * Sets x_currency
     *
     * @param string $x_currency Codigo de 3 caracteres para paises. <br><br> Info:<a href='https://en.wikipedia.org/wiki/ISO_4217#Active_codes' target=_blank>ISO_4217</a>
     *
     * @return $this
     */
    public function setXCurrency($x_currency)
    {
        if ((mb_strlen($x_currency) > 3)) {
            throw new \InvalidArgumentException('invalid length for $x_currency when calling RequestBodyTrx., must be smaller than or equal to 3.');
        }
        if ((mb_strlen($x_currency) < 3)) {
            throw new \InvalidArgumentException('invalid length for $x_currency when calling RequestBodyTrx., must be bigger than or equal to 3.');
        }

        $this->container['x_currency'] = $x_currency;

        return $this;
    }

    /**
     * Gets x_reference
     *
     * @return string
     */
    public function getXReference()
    {
        return $this->container['x_reference'];
    }

    /**
     * Sets x_reference
     *
     * @param string $x_reference \\\"TÃº\\\" identificador de orden. Este identificador deberÃ­a ser Ãºnico por servicio para no tener problema de duplicidad de pagos. Rechazaremos ids duplicados para el mismo servicio.
     *
     * @return $this
     */
    public function setXReference($x_reference)
    {
        if ((mb_strlen($x_reference) > 100)) {
            throw new \InvalidArgumentException('invalid length for $x_reference when calling RequestBodyTrx., must be smaller than or equal to 100.');
        }
        if ((mb_strlen($x_reference) < 1)) {
            throw new \InvalidArgumentException('invalid length for $x_reference when calling RequestBodyTrx., must be bigger than or equal to 1.');
        }

        $this->container['x_reference'] = $x_reference;

        return $this;
    }

    /**
     * Gets x_customer_email
     *
     * @return string
     */
    public function getXCustomerEmail()
    {
        return $this->container['x_customer_email'];
    }

    /**
     * Sets x_customer_email
     *
     * @param string $x_customer_email Email
     *
     * @return $this
     */
    public function setXCustomerEmail($x_customer_email)
    {

        if ((!preg_match("/^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/", $x_customer_email))) {
            throw new \InvalidArgumentException("invalid value for $x_customer_email when calling RequestBodyTrx., must conform to the pattern /^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$/.");
        }

        $this->container['x_customer_email'] = $x_customer_email;

        return $this;
    }

    /**
     * Gets x_url_complete
     *
     * @return string
     */
    public function getXUrlComplete()
    {
        return $this->container['x_url_complete'];
    }

    /**
     * Sets x_url_complete
     *
     * @param string $x_url_complete Una direcciÃ³n web vÃ¡lida
     *
     * @return $this
     */
    public function setXUrlComplete($x_url_complete)
    {
        $this->container['x_url_complete'] = $x_url_complete;

        return $this;
    }

    /**
     * Gets x_url_callback
     *
     * @return string
     */
    public function getXUrlCallback()
    {
        return $this->container['x_url_callback'];
    }

    /**
     * Sets x_url_callback
     *
     * @param string $x_url_callback Una direcciÃ³n web vÃ¡lida
     *
     * @return $this
     */
    public function setXUrlCallback($x_url_callback)
    {
        $this->container['x_url_callback'] = $x_url_callback;

        return $this;
    }

    /**
     * Gets x_url_cancel
     *
     * @return string
     */
    public function getXUrlCancel()
    {
        return $this->container['x_url_cancel'];
    }

    /**
     * Sets x_url_cancel
     *
     * @param string $x_url_cancel Una direcciÃ³n web vÃ¡lida
     *
     * @return $this
     */
    public function setXUrlCancel($x_url_cancel)
    {
        $this->container['x_url_cancel'] = $x_url_cancel;

        return $this;
    }

    /**
     * Gets x_shop_country
     *
     * @return string
     */
    public function getXShopCountry()
    {
        return $this->container['x_shop_country'];
    }

    /**
     * Sets x_shop_country
     *
     * @param string $x_shop_country Codigo de 2 caracteres para paises. <br><br> Info:<a href='https://en.wikipedia.org/wiki/ISO_3166-1#Current_codes'>ISO 3166-1 Alpha2-code</a>
     *
     * @return $this
     */
    public function setXShopCountry($x_shop_country)
    {
        if ((mb_strlen($x_shop_country) > 2)) {
            throw new \InvalidArgumentException('invalid length for $x_shop_country when calling RequestBodyTrx., must be smaller than or equal to 2.');
        }
        if ((mb_strlen($x_shop_country) < 2)) {
            throw new \InvalidArgumentException('invalid length for $x_shop_country when calling RequestBodyTrx., must be bigger than or equal to 2.');
        }

        $this->container['x_shop_country'] = $x_shop_country;

        return $this;
    }

    /**
     * Gets x_session_id
     *
     * @return string
     */
    public function getXSessionId()
    {
        return $this->container['x_session_id'];
    }

    /**
     * Sets x_session_id
     *
     * @param string $x_session_id Identificador Ãºnico de la sesiÃ³n del usuario que realiza el pago. Se agrega como capa de seguridad para validar la transacciÃ³n. Max. 61 caracteres.
     *
     * @return $this
     */
    public function setXSessionId($x_session_id)
    {
        if ((mb_strlen($x_session_id) > 61)) {
            throw new \InvalidArgumentException('invalid length for $x_session_id when calling RequestBodyTrx., must be smaller than or equal to 61.');
        }
        if ((mb_strlen($x_session_id) < 5)) {
            throw new \InvalidArgumentException('invalid length for $x_session_id when calling RequestBodyTrx., must be bigger than or equal to 5.');
        }

        $this->container['x_session_id'] = $x_session_id;

        return $this;
    }

    /**
     * Gets x_products
     *
     * @return object[]|null
     */
    public function getXProducts()
    {
        return $this->container['x_products'];
    }

    /**
     * Sets x_products
     *
     * @param object[]|null $x_products Productos asociados a la transacciÃ³n
     *
     * @return $this
     */
    public function setXProducts($x_products)
    {
        $this->container['x_products'] = $x_products;

        return $this;
    }

    /**
     * Gets x_billing_details
     *
     * @return \PSTPagoFacil\ApiClient\Model\BillingDetails|null
     */
    public function getXBillingDetails()
    {
        return $this->container['x_billing_details'];
    }

    /**
     * Sets x_billing_details
     *
     * @param \PSTPagoFacil\ApiClient\Model\BillingDetails|null $x_billing_details x_billing_details
     *
     * @return $this
     */
    public function setXBillingDetails($x_billing_details)
    {
        $this->container['x_billing_details'] = $x_billing_details;

        return $this;
    }

    /**
     * Gets x_shippment
     *
     * @return \PSTPagoFacil\ApiClient\Model\Shippment|null
     */
    public function getXShippment()
    {
        return $this->container['x_shippment'];
    }

    /**
     * Sets x_shippment
     *
     * @param \PSTPagoFacil\ApiClient\Model\Shippment|null $x_shippment x_shippment
     *
     * @return $this
     */
    public function setXShippment($x_shippment)
    {
        $this->container['x_shippment'] = $x_shippment;

        return $this;
    }

    /**
     * Gets x_document
     *
     * @return \PSTPagoFacil\ApiClient\Model\Document|null
     */
    public function getXDocument()
    {
        return $this->container['x_document'];
    }

    /**
     * Sets x_document
     *
     * @param \PSTPagoFacil\ApiClient\Model\Document|null $x_document x_document
     *
     * @return $this
     */
    public function setXDocument($x_document)
    {
        $this->container['x_document'] = $x_document;

        return $this;
    }

    /**
     * Gets x_signature
     *
     * @return string
     */
    public function getXSignature()
    {
        return $this->container['x_signature'];
    }

    /**
     * Sets x_signature
     *
     * @param string $x_signature Mensaje Firmado. Para mÃ¡s informaciÃ³n sobre la creaciÃ³n de la firma revisa https://developers.pagofacil.cl/docs/cÃ³mo-funciona-el-proceso-de-firmado
     *
     * @return $this
     */
    public function setXSignature($x_signature)
    {
        $this->container['x_signature'] = $x_signature;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


